package sh.saqoo.debug{
	
	
	/**
	 * @author Saqoosha
	 */
	public class DebugColor {
		
		
		private static const _palette:Vector.<uint> = Vector.<uint>([
			0xFF5543, 0xFF5343, 0xFF5541, 0xFF5341, 0xFF553F, 0xFF553D, 0xFF533C, 0xFF553A, 
			0xFF5338, 0xFF5336, 0xFF5536, 0xFF5534, 0xFF5332, 0xFF5532, 0xFF5330, 0xFF5530, 
			0xFF552E, 0xFF532C, 0xFF552E, 0xFF552C, 0xFF522A, 0xFF5228, 0xFF5529, 0xFF5527, 
			0xFF5529, 0xFF5729, 0xFF5529, 0xFF5729, 0xFF5529, 0xFF5727, 0xFF5729, 0xFF582A, 
			0xFF5929, 0xFF5A2A, 0xFF5C29, 0xFF5E29, 0xFF5F2A, 0xFF612A, 0xFF622B, 0xFF6327, 
			0xFF642A, 0xFF672B, 0xFF692B, 0xFF6A2A, 0xFF6A28, 0xFF6C2B, 0xFF6D2B, 0xFF6F28, 
			0xFF702C, 0xFF7129, 0xFF7328, 0xFF732B, 0xFF7429, 0xFF762C, 0xFF782A, 0xFF792C, 
			0xFF7929, 0xFF792C, 0xFF7C2A, 0xFF7F29, 0xFF802B, 0xFF822B, 0xFF832B, 0xFF852B, 
			0xFF862C, 0xFF872B, 0xFF882B, 0xFF8A29, 0xFF8A2B, 0xFF8D2A, 0xFF8D2C, 0xFF8E2A, 
			0xFF8F2B, 0xFF9028, 0xFF922B, 0xFF932B, 0xFF942C, 0xFF952C, 0xFF9628, 0xFF972A, 
			0xFF9829, 0xFF9929, 0xFF9C2A, 0xFF9D2B, 0xFF9E28, 0xFFA029, 0xFFA229, 0xFFA329, 
			0xFFA429, 0xFFA52A, 0xFFA728, 0xFFA626, 0xFFAA28, 0xFFAB29, 0xFFAB26, 0xFFAD27, 
			0xFFAE27, 0xFFB127, 0xFFB223, 0xFFB428, 0xFFB625, 0xFFB826, 0xFFBA27, 0xFFBA23, 
			0xFFBC26, 0xFFBD26, 0xFFBF25, 0xFFBF21, 0xFFC122, 0xFFC224, 0xFFC323, 0xFFC625, 
			0xFFC725, 0xFFC823, 0xFFC922, 0xFFCB23, 0xFFCB1F, 0xFFCD22, 0xFFCE22, 0xFFD122, 
			0xFFD220, 0xFFD21F, 0xFFD420, 0xFFD51D, 0xFFD61D, 0xFFD71C, 0xFFDA20, 0xFFDA1F, 
			0xFFDB19, 0xFFDC20, 0xFFDE1D, 0xFFDE17, 0xFFDF19, 0xFFE11A, 0xFFE31C, 0xFFE415, 
			0xFFE51D, 0xFFE517, 0xFFE719, 0xFFE81B, 0xFFE91A, 0xFFEB1C, 0xFFEB16, 0xFFEC10, 
			0xFFEF15, 0xFFF014, 0xFFF10E, 0xFFF310, 0xFFF40F, 0xFFF508, 0xFFF70B, 0xFFF80E, 
			0xFFF90D, 0xFFFA11, 0xFFFB04, 0xFFFC07, 0xFFFD0C, 0xFFFF02, 0xFFFF06, 0xFFFF04, 
			0xFEFF00, 0xFFFF04, 0xFCFF0B, 0xFBFF0A, 0xF9FF09, 0xF7FF10, 0xF6FF03, 0xF6FF0F, 
			0xF1FF00, 0xF1FF09, 0xF1FF13, 0xEFFF13, 0xEDFF12, 0xEAFF01, 0xE8FF0C, 0xE6FF0B, 
			0xE6FF15, 0xE3FF11, 0xE1FF10, 0xDFFF10, 0xDAFF14, 0xDAFF09, 0xD8FF08, 0xD6FF12, 
			0xD7FF10, 0xD3FF0E, 0xD5FF17, 0xD2FF0A, 0xD1FF16, 0xCFFF15, 0xCEFF12, 0xCCFF12, 
			0xCAFF11, 0xC7FF18, 0xC4FF15, 0xC0FF14, 0xBFFF19, 0xBDFF18, 0xBBFF0F, 0xBAFF17, 
			0xB8FF17, 0xB6FF16, 0xB4FF16, 0xB3FF13, 0xB2FF1A, 0xB0FF1A, 0xAEFF19, 0xAAFF16, 
			0xABFF19, 0xA8FF16, 0xA6FF15, 0xA3FF1B, 0xA4FF1A, 0xA2FF11, 0xA2FF19, 0x9FFF19, 
			0x9AFF18, 0x9DFF18, 0x9AFF18, 0x98FF17, 0x96FF14, 0x98FF17, 0x93FF1B, 0x91FF13, 
			0x91FF1A, 0x90FF18, 0x8EFF1A, 0x8AFF17, 0x8BFF20, 0x87FF16, 0x84FF16, 0x84FF1D, 
			0x81FF15, 0x81FF1C, 0x7EFF1C, 0x7BFF1B, 0x79FF19, 0x76FF1F, 0x77FF1B, 0x72FF1E, 
			0x6FFF18, 0x6FFF1E, 0x6EFF1C, 0x6EFF15, 0x69FF1C, 0x6AFF1C, 0x66FF1B, 0x62FF1B, 
			0x5EFF1A, 0x5EFF20, 0x5AFF1A, 0x59FF20, 0x55FF20, 0x4EFF1D, 0x50FF1F, 0x4EFF1D, 
			0x49FF1D, 0x43FF1C, 0x3CFF1C, 0x3BFF22, 0x3AFF1A, 0x3BFF22, 0x35FF1C, 0x31FF1F, 
			0x33FF19, 0x34FF21, 0x28FF1F, 0x2AFF19, 0x28FF1F, 0x30FF25, 0x25FF29, 0x2FFF29, 
			0x2EFF2D, 0x21FF31, 0x2BFF35, 0x29FF39, 0x31FF3C, 0x26FF3F, 0x24FF42, 0x2FFF46, 
			0x2BFF48, 0x29FF4B, 0x31FF4E, 0x25FF50, 0x30FF54, 0x2EFF57, 0x28FF5A, 0x26FF5D, 
			0x26FF60, 0x21FF62, 0x2CFF65, 0x28FF6A, 0x2FFF69, 0x20FF6D, 0x2CFF70, 0x27FF75, 
			0x24FF77, 0x1DFF78, 0x27FF7D, 0x24FF7F, 0x2FFF7F, 0x1EFF83, 0x2AFF84, 0x27FF86, 
			0x24FF88, 0x24FF8B, 0x21FF8A, 0x2CFF8A, 0x29FF8C, 0x30FF8E, 0x2EFF90, 0x1FFF92, 
			0x2BFF95, 0x28FF94, 0x25FF96, 0x2CFF9B, 0x2FFF99, 0x29FF9D, 0x26FF9C, 0x23FF9E, 
			0x2EFF9E, 0x2DFFA1, 0x27FFA2, 0x27FFA5, 0x2BFFA9, 0x27FFAB, 0x31FFAB, 0x23FFAD, 
			0x2BFFAF, 0x27FFB0, 0x23FFB2, 0x2EFFB2, 0x1EFFB4, 0x27FFB6, 0x2AFFBA, 0x1EFFBA, 
			0x26FFBC, 0x22FFBE, 0x2AFFC0, 0x25FFC2, 0x30FFC2, 0x1AFFC6, 0x28FFC6, 0x24FFC8, 
			0x2BFFC9, 0x27FFCB, 0x22FFCD, 0x29FFCF, 0x27FFD2, 0x1FFFD3, 0x2EFFD4, 0x21FFD7, 
			0x25FFD8, 0x29FFD9, 0x27FFDC, 0x32FFDC, 0x1AFFDF, 0x23FFE1, 0x33FFE0, 0x1DFFE3, 
			0x2AFFE3, 0x30FFE5, 0x1FFFE7, 0x17FFE9, 0x2AFFEA, 0x19FFED, 0x2BFFEE, 0x22FFEF, 
			0x23FFF2, 0x26FFF4, 0x2FFFF2, 0x2DFFF6, 0x2EFFF9, 0x21FFF9, 0x28FFFB, 0x2EFFFD, 
			0x19FFFF, 0x2EFFFF, 0x22FFFF, 0x29FFFF, 0x22FFFF, 0x29FFFF, 0x22FFFF, 0x31FFFF, 
			0x29FFFF, 0x26FFFF, 0x2CFFFF, 0x2EFFFF, 0x2CFEFF, 0x2EFCFF, 0x25FBFF, 0x3AFAFF, 
			0x33F9FF, 0x2BF8FF, 0x35F8FF, 0x37F6FF, 0x34F5FF, 0x31F4FF, 0x38F2FF, 0x33F2FF, 
			0x35F1FF, 0x3BEFFF, 0x36EFFF, 0x36EDFF, 0x39ECFF, 0x3BEBFF, 0x3AE8FF, 0x3DE8FF, 
			0x3BE7FF, 0x3CE5FF, 0x3DE4FF, 0x3EE3FF, 0x43E1FF, 0x39E0FF, 0x40E0FF, 0x41DEFF, 
			0x45DDFF, 0x48DCFF, 0x42DBFF, 0x43DAFF, 0x4AD8FF, 0x44D7FF, 0x4ED5FF, 0x4BD5FF, 
			0x4BD3FF, 0x49D2FF, 0x48D2FF, 0x4CD0FF, 0x4CCFFF, 0x4ACEFF, 0x4CCEFF, 0x4DCCFF, 
			0x4DCBFF, 0x48CAFF, 0x52C9FF, 0x4FC9FF, 0x52C7FF, 0x52C6FF, 0x52C4FF, 0x52C3FF, 
			0x54C2FF, 0x57C1FF, 0x57BFFF, 0x54BEFF, 0x58BEFF, 0x58BCFF, 0x58BBFF, 0x5BB9FF, 
			0x58B9FF, 0x5CB7FF, 0x59B7FF, 0x59B6FF, 0x5BB4FF, 0x5DB4FF, 0x5BB3FF, 0x5FB1FF, 
			0x60B0FF, 0x60AFFF, 0x60ADFF, 0x63ABFF, 0x62AAFF, 0x66A9FF, 0x63A8FF, 0x65A6FF, 
			0x66A6FF, 0x6AA5FF, 0x69A4FF, 0x65A3FF, 0x6AA2FF, 0x68A1FF, 0x689FFF, 0x6C9EFF, 
			0x6E9CFF, 0x6B9DFF, 0x6E9AFF, 0x719AFF, 0x7198FF, 0x7695FF, 0x7496FF, 0x7693FF, 
			0x7393FF, 0x7991FF, 0x7691FF, 0x7690FF, 0x7C8EFF, 0x788DFF, 0x7C8CFF, 0x7D8AFF, 
			0x7E8AFF, 0x7D88FF, 0x8087FF, 0x7F86FF, 0x7D86FF, 0x7E84FF, 0x7F84FF, 0x8482FF, 
			0x8181FF, 0x8480FF, 0x837FFF, 0x867DFF, 0x857BFF, 0x887AFF, 0x8A78FF, 0x8A77FF, 
			0x8B76FF, 0x8C74FF, 0x8E73FF, 0x8E72FF, 0x8C72FF, 0x9170FF, 0x8F70FF, 0x906DFF, 
			0x936CFF, 0x926AFF, 0x9469FF, 0x9367FF, 0x9467FF, 0x9764FF, 0x9964FF, 0x9862FF, 
			0x9663FF, 0x9A61FF, 0x9861FF, 0x9A60FF, 0x995FFF, 0x9A5EFF, 0x9C5CFF, 0x9A5DFF, 
			0x9E5BFF, 0x9F5AFF, 0x9D59FF, 0x9B59FF, 0x9D59FF, 0x9B59FF, 0xA057FF, 0x9D59FF, 
			0x9F5AFF, 0x9D59FF, 0xA358FF, 0xA158FF, 0x9F5AFF, 0xA059FF, 0xA358FF, 0x9F5AFF, 
			0xA059FF, 0xA358FF, 0xA059FF, 0xA259FF, 0xA059FF, 0xA259FF, 0xA458FF, 0xA35AFF, 
			0xA559FF, 0xA35AFF, 0xA559FF, 0xA759FF, 0xA75BFF, 0xAA5AFF, 0xA85AFF, 0xAA5AFF, 
			0xA85AFF, 0xAA5AFF, 0xAB59FF, 0xAD5AFF, 0xAE5AFF, 0xB05BFF, 0xB15AFF, 0xB25BFF, 
			0xB45BFF, 0xB25BFF, 0xB45BFF, 0xB55AFF, 0xB85BFF, 0xB95AFF, 0xBB5BFF, 0xBF5AFF, 
			0xBD5CFF, 0xBF5AFF, 0xC15AFF, 0xC35BFF, 0xC25CFF, 0xC65BFF, 0xC75BFF, 0xC95BFF, 
			0xCB5AFF, 0xCE5AFF, 0xCC5CFF, 0xCD5CFF, 0xCF5AFF, 0xD15BFF, 0xD25AFF, 0xD15BFF, 
			0xD25AFF, 0xD55AFF, 0xD55BFF, 0xD759FF, 0xD75CFF, 0xD95AFF, 0xDB5BFF, 0xDC5AFF, 
			0xDD5BFF, 0xDE5BFF, 0xE05CFF, 0xE359FF, 0xE45BFF, 0xE55AFF, 0xE65AFF, 0xE959FF, 
			0xE85BFF, 0xEA59FF, 0xEB5AFF, 0xEC59FF, 0xED5BFF, 0xF058FF, 0xF159FF, 0xF259FF, 
			0xF45AFF, 0xF559FF, 0xF658FF, 0xF859FF, 0xF958FF, 0xFB59FF, 0xFA59FF, 0xFD57FF, 
			0xFC5AFF, 0xFE58FF, 0xFF56FF, 0xFF57FF, 0xFF59FF, 0xFF58FF, 0xFF57FF, 0xFF58FF, 
			0xFF56FF, 0xFF59FF, 0xFF57FF, 0xFF58FF, 0xFF55FF, 0xFF57FF, 0xFF56FF, 0xFF54FF, 
			0xFF55FF, 0xFF56FF, 0xFF53FF, 0xFF57FF, 0xFF54FF, 0xFF55FF, 0xFF52FF, 0xFF53FF, 
			0xFF55FF, 0xFF54FF, 0xFF53FF, 0xFF56FF, 0xFF53FF, 0xFF54FF, 0xFF53FF, 0xFF52FF, 
			0xFF50FF, 0xFF52FF, 0xFF53FF, 0xFF55FF, 0xFF51FF, 0xFF53FF, 0xFF52FF, 0xFF55FF, 
			0xFF52FF, 0xFF54FF, 0xFF53FF, 0xFF51FF, 0xFF53FF, 0xFF54FF, 0xFF52FF, 0xFF54FF, 
			0xFF53FE, 0xFF53FC, 0xFF53FA, 0xFF55FA, 0xFF54F7, 0xFF56F5, 0xFF56F3, 0xFF53F1, 
			0xFF56F1, 0xFF53EE, 0xFF51ED, 0xFF53EB, 0xFF53E7, 0xFF51E6, 0xFF55E5, 0xFF54E2, 
			0xFF54E0, 0xFF54DE, 0xFF52DD, 0xFF54DC, 0xFF52DA, 0xFF51D8, 0xFF53D6, 0xFF53D3, 
			0xFF55D3, 0xFF53D1, 0xFF55CF, 0xFF54CE, 0xFF54CC, 0xFF54CA, 0xFF56C8, 0xFF56C7, 
			0xFF52C6, 0xFF55C3, 0xFF55C2, 0xFF52C0, 0xFF57C0, 0xFF54BC, 0xFF53BB, 0xFF54BB, 
			0xFF54B9, 0xFF55B6, 0xFF54B4, 0xFF54B3, 0xFF54B1, 0xFF54AF, 0xFF54AE, 0xFF53AC, 
			0xFF53AA, 0xFF55A8, 0xFF53A7, 0xFF55A7, 0xFF53A5, 0xFF54A2, 0xFF54A0, 0xFF549E, 
			0xFF549D, 0xFF569D, 0xFF569B, 0xFF5499, 0xFF5398, 0xFF5396, 0xFF5394, 0xFF5592, 
			0xFF5190, 0xFF5490, 0xFF558D, 0xFF558B, 0xFF578A, 0xFF5387, 0xFF5586, 0xFF5584, 
			0xFF5282, 0xFF527F, 0xFF547D, 0xFF547C, 0xFF547A, 0xFF5478, 0xFF5477, 0xFF5675, 
			0xFF5473, 0xFF5372, 0xFF5370, 0xFF536E, 0xFF536B, 0xFF556B, 0xFF5369, 0xFF5567, 
			0xFF5366, 0xFF5562, 0xFF5564, 0xFF5561, 0xFF545F, 0xFF545D, 0xFF545A, 0xFF5456, 
			0xFF5455, 0xFF5453, 0xFF5451, 0xFF5450, 0xFF544E, 0xFF544A, 0xFF5347
		]);
		
		private static const _numberOfColors:int = _palette.length;
		
		private static var _prevIndex:uint = 0;
		
		
		public static function get(hue:Number):uint {
			_prevIndex = hue % 360 / 360 * _numberOfColors;
			return _palette[_prevIndex];
		}
		
		
		public static function getNext():uint {
			_prevIndex = (_prevIndex + 181) % _numberOfColors;
			return _palette[_prevIndex];
		}
	}
}
